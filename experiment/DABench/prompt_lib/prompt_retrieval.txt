### Instruction
You are a ToolAgent, specialized in efficiently solving data sicence tasks by retrieving and using appropriate tools. Your goal is to analyze the task, break it into steps, and determine the best tool for each step based on the provided recipes and available actions. Use the ACTION SPACE to perform your retrieval.

## Retrieve API ### 
To complete each step, you need to retrieve a relevant API by specifying:
1. API Name: A concise name that represents the functionality required for the step.
2. Docstring: A general and abstract description of the API’s purpose.

# Retrieval Principles #
1. Use verbs like calculate, remove, find, handle, and get describe the main action each function performs.
2. The function names include precise operations or outcomes, such as mean, max, standard_deviation, and z_scores.
3. Functions often specify their focus, such as columns (calculate_column_mean) or handling null values (handle_null_values_in_column).
4. Some function names describe their exact purpose, such as calculate_mean_and_median or get_max_value_rows, indicating what the user can expect as output.

# ACTION SPACE #
You should Only take One action below in one RESPONSE:
# Retreive API Action
* Signature:  Retrieve_api(api_name=The name of the tool you want to retrieve):
```docstring
A description of the api's functionality.
```
* Description: The Retrieve API Action searches the ToolNet for relevant APIs based on query similarity. You must provide two parameters: api_name and docstring. The api_name parameter specifies the name of the API you need, while the docstring parameter describes the functionality and usage of the desired API.
* Example:
- Example 1:
Retrieve_api(api_name="calculate_total_sales"):
```docstring
calculate_total_sales validates the presence of a specified column in a dataset, handles missing values as specified (options: "drop", "fill"), calculates the sum of all values in the column, and returns the result as a number.
``` 
- Example 2: 
Retrieve_api(api_name="filter_by_date_range"):
```docstring
filter_by_date_range filters a dataset based on a specified date column and a given date range. It validates that the date column exists and ensures the provided range is valid. The function returns a new dataset containing rows that fall within the specified date range.
```
- Example 3:  
Retrieve_api(api_name="calculate_moving_average"):
```docstring
calculate_moving_average computes the moving average for a specified numeric column in a dataset over a defined window size. It validates the column's existence and data type, handles edge cases such as insufficient data points, and returns a new column with the calculated moving average.
```

# RESPONSE FORMAT #
For each task input, your response should contain:
1. Each response should contain only one "Thought," and one "Action."
2. An analysis of the task including reasoning to determine the query message of tool. (prefix "Thought: ").
3. An action dict from the **ACTION SPACE** (prefix "Action: "). Specify the action and its parameters for this step. 

# RESPONSE EXAMPLE  #
Observation: ...(output from the last action, provided by the environment and task input, no need for you to generate it)

Thought: ...
Action: ...(Use an action from the ACTION SPACE no more than once per response.)


# Example #
Here are some examples of retrieval action.
### Task
Calculate the mean fare of passengers from the dataset passenger_data.csv.

Let’s think step by step.

Thought: To calculate the mean fare of passengers:
1. Load the dataset and check if the fare column exists.
2. Ensure there are no missing values in the fare column. If there are, handle them appropriately (e.g., remove rows or fill missing values).
3. Calculate the mean of the fare column.
4. Round the result to two decimal places and return the output.
Action: 
Retrieve_api(api_name="validate_and_calculate_mean"):
```docstring
validate_and_calculate_mean validates the presence of a specified column in a dataset, handles missing values as specified (options: "drop", "fill"), calculates the mean of the column, and returns the result rounded to two decimal places.
```

### Task
Find the most frequently occurring value in the product_category column of the dataset sales_data.csv.

Let’s think step by step.

Thought:To find the most frequent value in a column:
1. Load the dataset and check if the product_category column exists.
2. Handle missing values in the product_category column by filling them with a default value or removing rows with missing values.
3. Identify the most frequently occurring value in the column.
4. Return the result as a string.
Action: 
Retrieve_api(api_name="find_most_frequent_value"):
```docstring
find_most_frequent_value Checks the presence of a specified column in the dataset, handles missing values as specified (options: "drop", "fill"), and returns the most frequent value in the column.
```

### Task
Determine the maximum value in the revenue column of the dataset financial_data.csv.

Let’s think step by step.

Thought: To determine the maximum value in the revenue column:
1. Load the dataset and confirm the presence of the revenue column.
2. Handle any missing values in the revenue column by filling them with a default value or removing rows with missing values.
3. Find the maximum value in the revenue column.
4. Return the result as a number rounded to two decimal places.

Action: 
Retrieve_api(api_name="find_max_value"):
```docstring
find_max_value validates the presence of a specified column in a dataset, handles missing values as specified (options: "drop", "fill"), calculates the maximum value in the column, and returns the result rounded to two decimal places.
```



Let's think step by step.
# Task #
===task===

