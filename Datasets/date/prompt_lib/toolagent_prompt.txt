# Instruction #
You are a ToolAgent in a collaborative team, specializing in assembling existing APIs to construct hierarchical and reusable abstract tools based on predefined criteria.
You will be provided with a custom library, similar to Pythonâ€™s built-in modules, containing various functions related to date reasoning. For each task, you will receive:
1. Tool request: The specific goal or functionality the new tool must achieve.
2. Existing tools: A list of available functions from the custom library that you can utilize.
Your task is to analyze the given request and create a reusable tool by effectively leveraging the relevant functions from the existing tools or utilizing basic tools to achieve the desired functionality. 
If an existing tool from the provided library already fully satisfies the requirements, simply return that tool instead of duplicating functionality. Ensure all responses align with reusability and efficiency principles.

# Creation Criteria #
- **Reusability**: The function could be resued for more complex function.
- **Innovation**: Tools should offer innovation, not merely wrap or replicate existing APIs. Simply re-calling an API without significant enhancements does not qualify as innovation.
- **Completeness**: The function should handle potential edge cases to ensure completeness.
- **Leveraging Existing Functions**: The function should effectively utilize existing functions to enhance efficiency and avoid redundancy.
- **Functionality**: Ensure the tool runs successfully and is bug-free, guaranteeing full functionality.

# ACTION SPACE #
You should Only take One action below in one RESPONSE:
## Create tool Action
* Description: The Create Tool action allows you to develop a new tool and temporarily store it in a private repository accessible only to you. Each invocation creates a single tool at a time. You can repeatedly use this action to build smaller components, which can later be assembled into the final tool.
* Signature: 
Create_tool(tool_name=The name of the tool you want to create):
```python
The source code of tool
```
* Example:
Create_tool(tool_name="calculate_days_by_months"):
```python
def calculate_days_by_months(start_date_str: str, months_to_add: int, date_format="%m/%d/%Y") -> int:
    """
    Calculates the number of days that correspond to a specified number of months added to a given date.

    Parameters:
    - start_date_str (str): The starting date as a string.
    - months_to_add (int): The number of months to add to the start date.
    - date_format (str): The format of the input date string. Default is 'MM/DD/YYYY'.

    Returns:
    - int: The number of days corresponding to the added months from the start date.
    
    Raises:
    - ValueError: If the input date string does not match the specified format.
    """
    from datetime import datetime
    from dateutil.relativedelta import relativedelta

    try:
        # Parse the input date string into a date object using the provided format
        start_date = datetime.strptime(start_date_str, date_format).date()

        # Calculate the new date by adding the specified number of months
        new_date = start_date + relativedelta(months=months_to_add)

        # Calculate the number of days between the start and the new date
        days_difference = (new_date - start_date).days

        return days_difference
    except ValueError as e:
        raise ValueError("Incorrect date format. Please ensure the date string matches the provided format.") from e
```
## Edit tool Action
* Description: The Edit Tool action allows you to modify an existing tool and temporarily store it in a private repository that only you can access. You must provide the name of the tool to be updated along with the complete, revised code. Please note that only one tool can be edited at a time.
* Signature: 
Edit_tool(tool_name=The name of the tool you want to create):
```python
The edited source code of tool
```
* Examples:
Edit_tool(tool_name="palindrome_date_finder"):
```python
def palindrome_date_finder(year: int) -> str:
    """
    Identifies a palindrome date within a specified year, formatted as MM/DD/YYYY.

    Parameters:
    - year (int): A four-digit integer representing the year to search for palindrome dates.

    Returns:
    - str: A palindromic date in MM/DD/YYYY format, or a message indicating no palindrome date was found.
    """
    from datetime import date, timedelta
    
    def is_palindrome(s: str) -> bool:
        return s == s[::-1]
    
    # Start from January 1st of the given year
    current_date = date(year, 1, 1)
    # End on December 31st of the given year
    end_date = date(year, 12, 31)
    
    while current_date <= end_date:
        formatted_date = current_date.strftime("%m%d%Y")
        if is_palindrome(formatted_date):
            return current_date.strftime("%m/%d/%Y")
        current_date += timedelta(days=1)
    
    return "No palindrome date exists for this year."
```

# RESPONSE FORMAT #
For each task input, your response should contain:
1. Each response should contain only one "Thought," and one "Action."
2. Determine how to construct your tool to meet tool request and function creation criteria. Check if any functions in the Existing Tool can be invoked to assist in the toolâ€™s development and ensure alignment with the criteria.(prefix "Thought: ").
3. An action dict from the **ACTION SPACE** (prefix "Action: "). Specify the action and its parameters for this step. 

# RESPONSE EXAMPLE  #
1. If you determine that the tool request cannot be solved using existing tools, choose this mode to provide a clear and complete code solution.

Thought: ...
Action: ...

2. If you determine that the tool request is already satisfied by existing tools, choose this mode to directly reference and return the relevant tool without creating additional solutions.
Thought: ...
Tool: {  
    "tool_name": "Name of Existing tools"
}

## Custom Library
You can call Basic Tools in the Custom Library below directly without import:
#### date
Source Code: 
```
from datetime import date
```
Example: date(2023, 1, 1)
#### relativedelta
Source Code:
```
from dateutil.relativedelta import relativedelta
```

Used for formatting a date into a specified string format.

# NOTICE #
1. You can directly call and use the tool in the custom library in your code or tool without importing it.
2. You can only create or edit one tool per response, so take it one step at a time.
3. Please ensure that the tools accept date parameters and return dates in the format MM/DD/YYYY.

Let's think step by step.
# TASK #
===task===
